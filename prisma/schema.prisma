generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                   String        @id @default(uuid())
  email                String        @db.VarChar(255)
  username             String?       @unique @db.VarChar(255)
  firstname            String?       @db.VarChar(255)
  lastname             String?       @db.VarChar(255)
  clerkid              String        @unique @db.VarChar(255)
  createdAt            DateTime      @default(now()) @db.Timestamp(3)
  updatedAt            DateTime      @updatedAt @db.Timestamp(3)
  books                Book[]
  sentSwapRequests     SwapRequest[] @relation("sentRequests")
  receivedSwapRequests SwapRequest[] @relation("receivedRequests")
  sentMessages         Message[]     @relation("SendingUser")
  receivedMessages     Message[]     @relation("ReceivingUser")
}

model Book {
  id           Int           @id @default(autoincrement())
  title        String
  authorId     Int
  genreId      Int
  summary      String?
  userId       String?
  rating       Float?
  status       String?
  condition    String?
  createdAt    DateTime      @default(now()) @db.Timestamp(3) @map("created_at")
  author       Author        @relation(fields: [authorId], references: [id])
  genre        Genre         @relation(fields: [genreId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  swapRequests SwapRequest[]

  @@map("books")
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now()) @db.Timestamp(3) @map("created_at")
  books     Book[]

  @@map("genre")
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now()) @db.Timestamp(3) @map("created_at")
  books     Book[]

  @@map("author")
}

model SwapRequest {
  id             Int      @id @default(autoincrement())
  senderUserId   String
  receiverUserId String
  bookId         Int
  status         String?
  createdAt      DateTime @default(now()) @db.Timestamp(3)
  senderUser     User     @relation("sentRequests", fields: [senderUserId], references: [id])
  receiverUser   User     @relation("receivedRequests", fields: [receiverUserId], references: [id])
  book           Book     @relation(fields: [bookId], references: [id])

  @@map("swap_requests")
}

model Message {
  id              String    @id @default(uuid())
  sendingUserId   String
  receivingUserId String
  messageBody     String
  sentTimestamp   DateTime @default(now()) @db.Timestamp(3)
  read            Boolean  @default(false)
  sendingUser     User     @relation("SendingUser", fields: [sendingUserId], references: [id])
  receivingUser   User     @relation("ReceivingUser", fields: [receivingUserId], references: [id])

  @@map("messages")
}
