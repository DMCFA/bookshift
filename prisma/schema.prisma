generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(255)
  username    String?       @db.VarChar(255)
  role        String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Book        Book[]
  SwapRequest SwapRequest[]
  SwapRequest SwapRequest[]
}

model Book {
  id           Int           @id @default(autoincrement())
  title        String?
  authorId     Int
  genreId      Int
  summary      String?
  userId       Int?
  rating       Float?
  status       String?
  condition    String?
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  author       Author        @relation(fields: [authorId], references: [id])
  genre        Genre         @relation(fields: [genreId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  swapRequests SwapRequest[]

  @@map(name: "books")
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  books     Book[]

  @@map(name: "genre")
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  books     Book[]

  @@map(name: "author")
}

model SwapRequest {
  id             Int      @id @default(autoincrement())
  senderUserId   Int      @map(name: "sender_user_id")
  receiverUserId Int      @map(name: "reciever_user_id")
  bookId         Int      @map(name: "bookid")
  status         String?
  createdAt      DateTime @default(now()) @map(name: "created_at")
  senderUser     User     @relation("senderUser", fields: [senderUserId], references: [id])
  receiverUser   User     @relation("receiverUser", fields: [receiverUserId], references: [id])
  book           Book     @relation(fields: [bookId], references: [id])
  User           User?    @relation(fields: [userId], references: [id])
  userId         Int?

  @@map(name: "swap_requests")
}
